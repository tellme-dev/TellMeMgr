<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hotel.dao.FunctionMapper" >
  <resultMap id="BaseResultMap" type="com.hotel.model.Function" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="level" property="level" jdbcType="TINYINT" />
    <result column="path" property="path" jdbcType="VARCHAR" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="is_leaf" property="isLeaf" jdbcType="BIT" />
  </resultMap>
  <sql id="Base_Column_List" >
    f.id, f.name, f.parent_id, f.level, f.path, f.is_leaf, f.url
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_function f
    where f.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_function
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hotel.model.Function" >
    insert into t_function (id, name, parent_id, 
      level, path, url, is_leaf)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{parentId,jdbcType=INTEGER}, 
      #{level,jdbcType=TINYINT}, #{path,jdbcType=VARCHAR},#{url,jdbcType=VARCHAR}, #{isLeaf,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.hotel.model.Function" >
    insert into t_function
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="parentId != null" >
        parent_id,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="path != null" >
        path,
      </if>
      <if test="url != null" >
        url,
      </if>
      <if test="isLeaf != null" >
        is_leaf,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null" >
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        #{level,jdbcType=TINYINT},
      </if>
      <if test="path != null" >
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="url != null" >
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="isLeaf != null" >
        #{isLeaf,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hotel.model.Function" >
    update t_function
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null" >
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=TINYINT},
      </if>
      <if test="path != null" >
        path = #{path,jdbcType=VARCHAR},
      </if>
      <if test="url != null" >
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="isLeaf != null" >
        is_leaf = #{isLeaf,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hotel.model.Function" >
    update t_function
    set name = #{name,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=INTEGER},
      level = #{level,jdbcType=TINYINT},
      path = #{path,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      is_leaf = #{isLeaf,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getFunctionByParentId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_function f
    where f.parent_id = #{parentId,jdbcType=INTEGER}
  </select>
  <select id="getFunctionByParentUrl" parameterType="java.lang.String" resultMap="BaseResultMap">
    select fun.id      as id,
           fun.name    as name,
           fun.url     as url,
           fun.parent_id as parentId,
           fun.level   as level
    
    from t_function f
    left join t_function fun on fun.parent_id = f.id
    where f.url = #{url,jdbcType=VARCHAR}
  </select>
</mapper>