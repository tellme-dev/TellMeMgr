<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hotel.dao.RegionMapper" >
  <resultMap id="BaseResultMap" type="com.hotel.model.Region" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="level" property="level" jdbcType="INTEGER" />
    <result column="path" property="path" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="code" property="code" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, parent_id, level, path, name, code
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_region
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_region
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hotel.model.Region" >
    insert into t_region (id, parent_id, level, 
      path, name, code)
    values (#{id,jdbcType=INTEGER}, #{parentId,jdbcType=INTEGER}, #{level,jdbcType=INTEGER}, 
      #{path,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hotel.model.Region" >
    insert into t_region
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="parentId != null" >
        parent_id,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="path != null" >
        path,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="code != null" >
        code,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="parentId != null" >
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        #{level,jdbcType=INTEGER},
      </if>
      <if test="path != null" >
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null" >
        #{code,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hotel.model.Region" >
    update t_region
    <set >
      <if test="parentId != null" >
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="path != null" >
        path = #{path,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null" >
        code = #{code,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hotel.model.Region" >
    update t_region
    set parent_id = #{parentId,jdbcType=INTEGER},
      level = #{level,jdbcType=INTEGER},
      path = #{path,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      code = #{code,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="getAllRegion" resultMap="BaseResultMap" parameterType="com.hotel.model.Region">
  select 
  <include refid="Base_Column_List" />
  from t_region
  </select>
  
  <select id="getRegionByCode" resultMap="BaseResultMap" parameterType="java.lang.String">
  select 
  <include refid="Base_Column_List" />
  from t_region where code = #{code,jdbcType=VARCHAR}
  </select>
  <insert id="insertAndReturnId" parameterType="com.hotel.model.Region" >
  	<selectKey resultType="INTEGER" keyProperty="id">
       SELECT LAST_INSERT_ID()
  	</selectKey>
  	
    insert into t_region (id, parent_id, level, 
      path, name, code)
    values (#{id,jdbcType=INTEGER}, #{parentId,jdbcType=INTEGER}, #{level,jdbcType=INTEGER}, 
      #{path,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR})
  </insert>
  
  <select id="getProvinceRegion" resultMap="BaseResultMap" parameterType="com.hotel.model.Region">
  select 
  <include refid="Base_Column_List" />
  from t_region where parent_id=0
  </select>
  
  <select id="getCityRegion" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_region where parent_id = #{provinceId,jdbcType=INTEGER}
  </select>
  
  <select id="getAreaRegion" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_region where parent_id = #{cityId,jdbcType=INTEGER}
  </select>
  <select id="getHistoricRegions" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
  	select 
		CASE a.`level`
		WHEN 3 THEN a.parent_id 
		WHEN 1 THEN a.id
		when 2 then a.id
		END AS id,
		
		CASE a.`level`
		WHEN 3 THEN (SELECT f.`name` FROM t_region f WHERE f.id = a.parent_id)
		WHEN 2 THEN a.`name`
		WHEN 1 THEN a.`name`
		END AS `name`,
		
		CASE a.`level`
		WHEN 3 THEN (SELECT f.`parent_id` FROM t_region f WHERE f.id = a.parent_id)
		WHEN 2 THEN a.`parent_id`
		WHEN 1 THEN a.`parent_id`
		END AS `parent_id`,
		
		CASE a.`level`
		WHEN 3 THEN 2
		WHEN 2 THEN 2
		WHEN 1 THEN 1
		END AS `level`,
		
		CASE a.`level`
		WHEN 3 THEN (SELECT f.`path` FROM t_region f WHERE f.id = a.parent_id)
		WHEN 2 THEN a.`path`
		WHEN 1 THEN a.`path`
		END AS `path`
		
 	FROM t_region a
	LEFT JOIN t_hotle b on a.id = b.region_id
	LEFT JOIN t_room_check c on b.id = c.hotel_id
	LEFT JOIN t_customer  d on c.customer_id = d.id
	where d.id = #{0}
	GROUP BY name;
  </select>
  
  <select id="getNearAndHotRegionsByCustomer" resultMap="BaseResultMap" parameterType="java.lang.Integer">
SELECT d.id,d.`name`,d.parent_id,d.path,d.level FROM(SELECT a.*,(SELECT count(*) FROM t_region b WHERE b.parent_id = a.id) AS total
		FROM t_region a
		WHERE  a.`level` = 2)AS d
ORDER BY d.total DESC
		LIMIT 0,#{1}
  </select>
</mapper>